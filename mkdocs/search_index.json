{
    "docs": [
        {
            "location": "/", 
            "text": "GalaxyKickstarter\n\n\nGalaxyKickstarter is an \nAnsible\n playbook designed for installing, testing, deploying and \nmaintaining production-grade Galaxy instances.\n\nIn the basic configuration, this includes:\n\n\n\n\npostgresql server as database backend \n\n\nnginx proxy \n\n\nslurm cluster\n\n\n\n\nIn adition, tools and workflows can be managed.", 
            "title": "Home"
        }, 
        {
            "location": "/#galaxykickstarter", 
            "text": "GalaxyKickstarter is an  Ansible  playbook designed for installing, testing, deploying and \nmaintaining production-grade Galaxy instances. \nIn the basic configuration, this includes:   postgresql server as database backend   nginx proxy   slurm cluster   In adition, tools and workflows can be managed.", 
            "title": "GalaxyKickstarter"
        }, 
        {
            "location": "/about/", 
            "text": "GalaxyKickstarter\n\n\nGalaxyKickstarter is an Ansible playbook designed to help you get one or more production-ready\n \nGalaxy servers\n based on Ubuntu within minutes, and to maintain these servers.\n\n\nOptionally, instances can be pre-loaded with tools and workflows.\n\n\nThe playbook has been tested on \n\n\n\n\nCloud Machines\n\n\nVagrant Boxes\n\n\nPhysical Servers \n\n\nDocker.\n\n\n\n\nGalaxyKickstarter has been developed at the \nARTbio platform\n and contains roles developed\nby the \nGalaxy team\n.\n\n\nList of roles included in this playbook\n\n\nansible-postgresql-objects\n\n\ngalaxy-extras role\n\n\ngalaxy-tools role\n\n\ngalaxy-os role\n\n\ngalaxy role", 
            "title": "What is GalaxyKickstarter"
        }, 
        {
            "location": "/about/#galaxykickstarter", 
            "text": "GalaxyKickstarter is an Ansible playbook designed to help you get one or more production-ready\n  Galaxy servers  based on Ubuntu within minutes, and to maintain these servers.  Optionally, instances can be pre-loaded with tools and workflows.  The playbook has been tested on    Cloud Machines  Vagrant Boxes  Physical Servers   Docker.   GalaxyKickstarter has been developed at the  ARTbio platform  and contains roles developed\nby the  Galaxy team .", 
            "title": "GalaxyKickstarter"
        }, 
        {
            "location": "/about/#list-of-roles-included-in-this-playbook", 
            "text": "ansible-postgresql-objects  galaxy-extras role  galaxy-tools role  galaxy-os role  galaxy role", 
            "title": "List of roles included in this playbook"
        }, 
        {
            "location": "/getting_started/", 
            "text": "Getting Started\n\n\nGalaxyKickstarter is designed to be flexible and powerful, but for demonstration purposes we start a simple vagrant box \nthat runs this playbook. Following these instructions will not change the host system.\nAlternatively, see \nexamples/docker\n for running the playbook in docker.\nMore advanced examples are shown in \nexamples\n.\n\n\nRequirements\n\n\nTo follow the examples \nansible\n, \nvagrant\n \nand \ngit\n need to be installed.\n\n\nGetting the playbook\n\n\nGalaxyKickstarter is hosted on \ngithub\n and makes use of submodules, so care\nneeds to be taken to also download the submodules. Cloning the repository for the first time can be done like this \n(note the \n--recursive\n):\n\n\ngit clone --recursive https://github.com/ARTbio/ansible-artimed.git\n\n\n\n\nThe playbook (here \ngalaxy.yml\n) should be in the ansible-artimed folder.\n\n\nls ansible-artimed/\nCONTRIBUTORS.md  docs  extra-files  galaxy.yml  group_vars  hosts  \nLICENSE.txt  mkdocs.yml  pre-commit.sh  README.md  roles  Vagrantfile\n\n\n\n\nRunning the playbook on a Virtual Machine\n\n\nThe Vagrantfile describes a Virtual Machine (VM) that is based on Ubuntu trusty.\n\n\nVAGRANTFILE_API_VERSION = \n2\n\n   Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|\n      config.vm.box = \nubuntu/trusty64\n\n      config.vm.network \nforwarded_port\n, guest: 80, host: 8080\n      config.vm.network \nforwarded_port\n, guest: 21, host: 2121\n\n      config.vm.provider \nvirtualbox\n do |v|\n         v.memory = 4096\n      end\n\n      config.vm.provision \nansible\n do |ansible|\n         ansible.extra_vars = {\n            ntp_server: \npool.ntp.org\n,\n            ansible_ssh_user: 'vagrant' \n         }\n         ansible.verbose = 'vvvv'\n         ansible.playbook = \ngalaxy.yml\n\n      end\n   end\n\n\n\n\nBy default, port 8080 will be forwarded to port 80, and port 2121 will be forwarded to port 21 (for FTP),\nand 4096 MB of memory will be attributed to the VM.\nEnter the playbook directory \ncd ansible-artimed\n and type \nvagrant up\n to download a VM image and run the \ngalaxy.yml\n playbook.\nThis will take a while. Once finished, you should find a running Galaxy Instance on http://localhost:8080 .\nIf you would like to see the internals of the VM, you can log into the machine by typing \nvagrant ssh\n.\n\n\nCleaning up\n\n\nThe VM image and various config files have been written to the \n.vagrant\n folder. Type \nvagrant stop\n to stop the running instance\nand \nvagrant destroy\n to remove the VM, and then delete the \n.vagrant\n folder.", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting_started/#getting-started", 
            "text": "GalaxyKickstarter is designed to be flexible and powerful, but for demonstration purposes we start a simple vagrant box \nthat runs this playbook. Following these instructions will not change the host system.\nAlternatively, see  examples/docker  for running the playbook in docker.\nMore advanced examples are shown in  examples .", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting_started/#requirements", 
            "text": "To follow the examples  ansible ,  vagrant  \nand  git  need to be installed.", 
            "title": "Requirements"
        }, 
        {
            "location": "/getting_started/#getting-the-playbook", 
            "text": "GalaxyKickstarter is hosted on  github  and makes use of submodules, so care\nneeds to be taken to also download the submodules. Cloning the repository for the first time can be done like this \n(note the  --recursive ):  git clone --recursive https://github.com/ARTbio/ansible-artimed.git  The playbook (here  galaxy.yml ) should be in the ansible-artimed folder.  ls ansible-artimed/\nCONTRIBUTORS.md  docs  extra-files  galaxy.yml  group_vars  hosts  \nLICENSE.txt  mkdocs.yml  pre-commit.sh  README.md  roles  Vagrantfile", 
            "title": "Getting the playbook"
        }, 
        {
            "location": "/getting_started/#running-the-playbook-on-a-virtual-machine", 
            "text": "The Vagrantfile describes a Virtual Machine (VM) that is based on Ubuntu trusty.  VAGRANTFILE_API_VERSION =  2 \n   Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|\n      config.vm.box =  ubuntu/trusty64 \n      config.vm.network  forwarded_port , guest: 80, host: 8080\n      config.vm.network  forwarded_port , guest: 21, host: 2121\n\n      config.vm.provider  virtualbox  do |v|\n         v.memory = 4096\n      end\n\n      config.vm.provision  ansible  do |ansible|\n         ansible.extra_vars = {\n            ntp_server:  pool.ntp.org ,\n            ansible_ssh_user: 'vagrant' \n         }\n         ansible.verbose = 'vvvv'\n         ansible.playbook =  galaxy.yml \n      end\n   end  By default, port 8080 will be forwarded to port 80, and port 2121 will be forwarded to port 21 (for FTP),\nand 4096 MB of memory will be attributed to the VM.\nEnter the playbook directory  cd ansible-artimed  and type  vagrant up  to download a VM image and run the  galaxy.yml  playbook.\nThis will take a while. Once finished, you should find a running Galaxy Instance on http://localhost:8080 .\nIf you would like to see the internals of the VM, you can log into the machine by typing  vagrant ssh .", 
            "title": "Running the playbook on a Virtual Machine"
        }, 
        {
            "location": "/getting_started/#cleaning-up", 
            "text": "The VM image and various config files have been written to the  .vagrant  folder. Type  vagrant stop  to stop the running instance\nand  vagrant destroy  to remove the VM, and then delete the  .vagrant  folder.", 
            "title": "Cleaning up"
        }, 
        {
            "location": "/customizations/", 
            "text": "Customising the playbook\n\n\nWe strongly encourage users to read the \nansible inventory\n documentation first.  \n\n\nMost settings should be editable without modifying the playbook directly,\ninstead variables can be set in group_vars and host vars.\n\n\nThe playbook comes with an example inventory file \nhosts\n.\n\n\n[artimed]\nlocalhost ansible_ssh_user=\nroot\n ansible_ssh_private_key_file=\n~/.ssh/id_rsa\n\n[travis_bioblend]\nlocalhost ansible_connection=local\n[aws]\n# Put you aws IP and key here to make FTP work in the default VPC.\n# If you want further group-specific variables, put the host in these groups as well [e.g artimed].\n\n\n\n\n[artimed]\n, \n[travis_bioblend]\n and \n[aws]\n are predefined groups. Any host (here we only have localhost) that\nis added to one or multiple groups will have the corresponding group variables applied.\nGroup variables are defined in \ngroup_vars/[name of the group]\n and default variables are found in \n\n\ngroup_vars/all\n.\nAll variables defined in \ngroup_vars/all\n are overwritten in \ngroup_vars/[name of the group]\n.  \n\n\nFor instance the variable \nproftpd_nat_masquerade\n is set to \nfalse\n in \ngroup_vars/all\n, while hosts in the \n[aws]\n group\napply the \n[aws]\n group variables which set \nproftpd_nat_masquerade\n to true, so that hosts in the aws group will have\nthis aws-specific setting applied. Any combination of groups may be used.\n\n\nImportant variables\n\n\nWe aimed for this playbook to be reusable. We therefore made most variables configurable.\nThe group_vars/all file contains the variables we have chosen as defaults. You may override them either in this file\nor you can use ansible group variables to selectively set the variables for certain hosts/groups. See the \nansible documentation\nabout group variables\n for details.\n\n\nThese most important variables are:\n\n\n\n\n\n\nansible_ssh_user - The login name used to access the target.\n\n\n\n\n\n\nansible_ssh_private_key_file - The ssh private key used to access the target.\n\n\n\n\n\n\ninstall_galaxy - True for install a Galaxy instance.\n\n\n\n\n\n\ninstall_tools - True for install the NGS tools.\n\n\n\n\n\n\nrun_data_manager - True for run the data manager procedure.\n\n\n\n\n\n\ngalaxy_user_name - The Operating System user name for galaxy process.\n\n\n\n\n\n\ngalaxy_server_dir - The home of Operating System user for galaxy process.\n\n\n\n\n\n\ngalaxy_admin - The admin galaxy user.\n\n\n\n\n\n\ngalaxy_admin_pw - The admin galaxy password.\n\n\n\n\n\n\ndefault_admin_api_key - The api key for tool installation and download reference genomes throught galaxy data managers. To be removed in production.\n\n\n\n\n\n\ngalaxy_tool_list - The files that constants the list of tools to be installed.\n\n\n\n\n\n\ngalaxy_data_managers - The reference genomes and indexes to be load and build.\n\n\n\n\n\n\ngalaxy_data - The persistent directory where the galaxy config and database directories will be installed or will be recovered.\n\n\n\n\n\n\ngalaxy_database - The persistent directory where postgresql will be installed or will be recovered.\n\n\n\n\n\n\ngalaxy_db - Connection string for galaxy-postgresql.\n\n\n\n\n\n\ngalaxy_changeset_id - The release of Galaxy to be installed (master, dev or release_xx_xx).", 
            "title": "Customizations"
        }, 
        {
            "location": "/customizations/#customising-the-playbook", 
            "text": "We strongly encourage users to read the  ansible inventory  documentation first.    Most settings should be editable without modifying the playbook directly,\ninstead variables can be set in group_vars and host vars.  The playbook comes with an example inventory file  hosts .  [artimed]\nlocalhost ansible_ssh_user= root  ansible_ssh_private_key_file= ~/.ssh/id_rsa \n[travis_bioblend]\nlocalhost ansible_connection=local\n[aws]\n# Put you aws IP and key here to make FTP work in the default VPC.\n# If you want further group-specific variables, put the host in these groups as well [e.g artimed].  [artimed] ,  [travis_bioblend]  and  [aws]  are predefined groups. Any host (here we only have localhost) that\nis added to one or multiple groups will have the corresponding group variables applied.\nGroup variables are defined in  group_vars/[name of the group]  and default variables are found in   group_vars/all .\nAll variables defined in  group_vars/all  are overwritten in  group_vars/[name of the group] .    For instance the variable  proftpd_nat_masquerade  is set to  false  in  group_vars/all , while hosts in the  [aws]  group\napply the  [aws]  group variables which set  proftpd_nat_masquerade  to true, so that hosts in the aws group will have\nthis aws-specific setting applied. Any combination of groups may be used.", 
            "title": "Customising the playbook"
        }, 
        {
            "location": "/customizations/#important-variables", 
            "text": "We aimed for this playbook to be reusable. We therefore made most variables configurable.\nThe group_vars/all file contains the variables we have chosen as defaults. You may override them either in this file\nor you can use ansible group variables to selectively set the variables for certain hosts/groups. See the  ansible documentation\nabout group variables  for details.  These most important variables are:    ansible_ssh_user - The login name used to access the target.    ansible_ssh_private_key_file - The ssh private key used to access the target.    install_galaxy - True for install a Galaxy instance.    install_tools - True for install the NGS tools.    run_data_manager - True for run the data manager procedure.    galaxy_user_name - The Operating System user name for galaxy process.    galaxy_server_dir - The home of Operating System user for galaxy process.    galaxy_admin - The admin galaxy user.    galaxy_admin_pw - The admin galaxy password.    default_admin_api_key - The api key for tool installation and download reference genomes throught galaxy data managers. To be removed in production.    galaxy_tool_list - The files that constants the list of tools to be installed.    galaxy_data_managers - The reference genomes and indexes to be load and build.    galaxy_data - The persistent directory where the galaxy config and database directories will be installed or will be recovered.    galaxy_database - The persistent directory where postgresql will be installed or will be recovered.    galaxy_db - Connection string for galaxy-postgresql.    galaxy_changeset_id - The release of Galaxy to be installed (master, dev or release_xx_xx).", 
            "title": "Important variables"
        }, 
        {
            "location": "/installing tools and workflows/", 
            "text": "Installing tools\n\n\n\n\nThis playbook includes the \nansible-galaxy-tools\n role which can be used\nto install tools and workflows into galaxy instances using the \nbioblend\n api.  \n\n\nCreating a tool_list.yml file\n\n\nTo install tools, you will need to prepare a list of tools in yaml format.\nA an example of a a tool list can be found in \nhere\n\n\ntools:\n- name: blast_to_scaffold\n  owner: drosofff\n  revisions:\n  tool_panel_section_label: Metavisitor\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: blastx_to_scaffold\n  owner: drosofff\n  revisions:\n  tool_panel_section_label: Metavisitor\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: bowtie2\n  owner: devteam\n  revisions:\n  - 019c2a81547a\n  tool_panel_section_label: Metavisitor\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n\n\n\n\nwhen the revision is empty, the latest available revision will be installed.\n\ntool_panel_section_label will determine the tool panel section where the tools will be found.\n\n\nObtaining a tool_list.yml file\n\n\nWe can also obtain a tool list from a runnning galaxy instance.\nNote that for server running a galaxy release \n16.04, you need a galaxy API keys and bioblend.\nA script is included in the extra-files directory.\n\n\npython get_tool_yml_from_gi.py --galaxy \nmy_galaxy_url\n --api-key \nmy_admin_api_key\n --output-file \nmy_tool_list.yml\n\n\n\n\n\nAdding a tool_list.yml file to a group_variable files\n\n\nGroup variable files are in the group_vars directory.\n\n\nIf you would like to install tools, you need to reference the tool_list.yml in the group variable file.\nWe typically place additional files in the \nextra-files/\nhostname\n/\nhostname\n_tool_list.yml\n file.\n\n\nIf you would like to add tools to a group that is called metavisitor edit \ngroup_vars/metavisitor\n and add these lines:\n\n\ninstall_tools: true\ngalaxy_tools_tool_list: \nextra-files/metavisitor/metavisitor_tool_list.yml\n\n\n\n\n\nInstalling workflows\n\n\nYou can also make sure that workflows are available after running the playbook.\nAs with tools, place the workflows in \nextra-files/\nhostname\n/\nhostname\nworkflow_name\n.ga\n\nAdd these lines to the corresponding group_var file:\n\n\ngalaxy_tools_install_workflows: true\ngalaxy_tools_workflows:\n  - \nextra-files/metavisitor/Galaxy-Workflow-create_model.ga\n\n  - \nextra-files/metavisitor/Galaxy-Workflow-separate_host_and_virus_reads.ga\n\n  - \nextra-files/metavisitor/Galaxy-Workflow-standart_metavisitor_workflow_(input__clipped_dataset).ga\n\n  - \nextra-files/metavisitor/Galaxy-Workflow-Metavisitor_Test_case_1-1_Guided.ga\n\n  - \nextra-files/metavisitor/Galaxy-Workflow-Metavisitor_Test_case_1-2_Guided.ga\n\n  - \nextra-files/metavisitor/Galaxy-Workflow-Metavisitor_Test_case_1-3_Guided.ga\n\n  - \nextra-files/metavisitor/Galaxy-Workflow-Meta-visitor__test_case_Nora_virus,_REMAPPING.ga", 
            "title": "Installing tools and workflows"
        }, 
        {
            "location": "/installing tools and workflows/#installing-tools", 
            "text": "This playbook includes the  ansible-galaxy-tools  role which can be used\nto install tools and workflows into galaxy instances using the  bioblend  api.", 
            "title": "Installing tools"
        }, 
        {
            "location": "/installing tools and workflows/#creating-a-tool_listyml-file", 
            "text": "To install tools, you will need to prepare a list of tools in yaml format.\nA an example of a a tool list can be found in  here  tools:\n- name: blast_to_scaffold\n  owner: drosofff\n  revisions:\n  tool_panel_section_label: Metavisitor\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: blastx_to_scaffold\n  owner: drosofff\n  revisions:\n  tool_panel_section_label: Metavisitor\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: bowtie2\n  owner: devteam\n  revisions:\n  - 019c2a81547a\n  tool_panel_section_label: Metavisitor\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/  when the revision is empty, the latest available revision will be installed. \ntool_panel_section_label will determine the tool panel section where the tools will be found.", 
            "title": "Creating a tool_list.yml file"
        }, 
        {
            "location": "/installing tools and workflows/#obtaining-a-tool_listyml-file", 
            "text": "We can also obtain a tool list from a runnning galaxy instance.\nNote that for server running a galaxy release  16.04, you need a galaxy API keys and bioblend.\nA script is included in the extra-files directory.  python get_tool_yml_from_gi.py --galaxy  my_galaxy_url  --api-key  my_admin_api_key  --output-file  my_tool_list.yml", 
            "title": "Obtaining a tool_list.yml file"
        }, 
        {
            "location": "/installing tools and workflows/#adding-a-tool_listyml-file-to-a-group_variable-files", 
            "text": "Group variable files are in the group_vars directory.  If you would like to install tools, you need to reference the tool_list.yml in the group variable file.\nWe typically place additional files in the  extra-files/ hostname / hostname _tool_list.yml  file.  If you would like to add tools to a group that is called metavisitor edit  group_vars/metavisitor  and add these lines:  install_tools: true\ngalaxy_tools_tool_list:  extra-files/metavisitor/metavisitor_tool_list.yml", 
            "title": "Adding a tool_list.yml file to a group_variable files"
        }, 
        {
            "location": "/installing tools and workflows/#installing-workflows", 
            "text": "You can also make sure that workflows are available after running the playbook.\nAs with tools, place the workflows in  extra-files/ hostname / hostname workflow_name .ga \nAdd these lines to the corresponding group_var file:  galaxy_tools_install_workflows: true\ngalaxy_tools_workflows:\n  -  extra-files/metavisitor/Galaxy-Workflow-create_model.ga \n  -  extra-files/metavisitor/Galaxy-Workflow-separate_host_and_virus_reads.ga \n  -  extra-files/metavisitor/Galaxy-Workflow-standart_metavisitor_workflow_(input__clipped_dataset).ga \n  -  extra-files/metavisitor/Galaxy-Workflow-Metavisitor_Test_case_1-1_Guided.ga \n  -  extra-files/metavisitor/Galaxy-Workflow-Metavisitor_Test_case_1-2_Guided.ga \n  -  extra-files/metavisitor/Galaxy-Workflow-Metavisitor_Test_case_1-3_Guided.ga \n  -  extra-files/metavisitor/Galaxy-Workflow-Meta-visitor__test_case_Nora_virus,_REMAPPING.ga", 
            "title": "Installing workflows"
        }, 
        {
            "location": "/examples/remote machines/", 
            "text": "Deploying galaxy-kickstart on remote machines.\n\n\n\n\nInside the repository you will find a hosts file.\n\nThis is an example inventory.\n\n\n[artimed]\nlocalhost ansible_ssh_user=\nroot\n ansible_ssh_private_key_file=\n~/.ssh/id_rsa\n\n...\n\n\n\n\nHere \n[artimed]\n is a group, that contains a machine called localhost.\nThe variables defined in \ngroup_vars/artimed\n will be applied to this host.\nAnsible will connect by ssh to this machine, using the ssh key in \n~/.ssh/id_rsa\n.\n\n\nIf you would like to run this playbook on a remote machine by ssh (currently needs to be a debian-type machine),\n\ncreate a new inventory, and change \nlocalhost\n to the IP address of that machine.\n\nansible_ssh_user=\nuser\n controls under which username to connect to this machine.\nThis user needs to have sudo rights.\n\n\nThen, run the plabook by typing:\n\n\nansible-playbook --inventory-file=\nyour_inventory\n galaxy.yml\n\n\n\n\nYou can put multiple machines in your inventory.\n\nIf you run the playbook a second time, the process will be much faster, since steps that have already been executed will be skipped.", 
            "title": "Remote machines"
        }, 
        {
            "location": "/examples/remote machines/#deploying-galaxy-kickstart-on-remote-machines", 
            "text": "Inside the repository you will find a hosts file. \nThis is an example inventory.  [artimed]\nlocalhost ansible_ssh_user= root  ansible_ssh_private_key_file= ~/.ssh/id_rsa \n...  Here  [artimed]  is a group, that contains a machine called localhost.\nThe variables defined in  group_vars/artimed  will be applied to this host.\nAnsible will connect by ssh to this machine, using the ssh key in  ~/.ssh/id_rsa .  If you would like to run this playbook on a remote machine by ssh (currently needs to be a debian-type machine), \ncreate a new inventory, and change  localhost  to the IP address of that machine. ansible_ssh_user= user  controls under which username to connect to this machine.\nThis user needs to have sudo rights.  Then, run the plabook by typing:  ansible-playbook --inventory-file= your_inventory  galaxy.yml  You can put multiple machines in your inventory. \nIf you run the playbook a second time, the process will be much faster, since steps that have already been executed will be skipped.", 
            "title": "Deploying galaxy-kickstart on remote machines."
        }, 
        {
            "location": "/examples/docker/", 
            "text": "Building and deploying galaxy-kickstart in docker\n\n\n\n\nRequirements\n\n\nYou need to have docker installed and configured for your user.\n\n\nThe repository comes with various Dockerfiles that can be used to configure a deployment using Docker,\nor you can start with a pre-built docker image.\n\n\nRunning images from the dockerhub\n\n\nYou can obtain a pre-built docker image from the dockerhub:\n\n\ndocker pull artbio/galaxy-kickstart-base\n\n\n\n\nStart the image and serve it on port 8080 of your local machine in the standard docker way:\n\n\nCID=`docker run -d -p 8080:80 artbio/galaxy-kickstart-base`\n\n\n\n\n-p 8080:80\n will forward requests to nginx inside the container running on port 80.\n\n\nRuntime changes to pre-built docker images\n\n\nIf you wish to reach the container on a subdirectory, add \n-e NGINX_GALAXY_LOCATION=\"/my-subdirectory\"\n to the docker call \nand galaxy will be served at \nhttp://127.0.0.1:8080/my-subdirectory\n.\n\n\nWe recommend changing the default admin user as well, so the command becomes:\n\n\nCID=`docker run -d -e NGINX_GALAXY_LOCATION=\n/my-subdirectory\n -e GALAXY_CONFIG_ADMIN_USERS=admin@artbio.fr -p 8080:80 artbio/galaxy-kickstart-base`\n\n\n\n\nCommit changed containers to new images\n\n\nAs with standard docker containers, you can change, tag and commit running containers when you have configured them to your liking:\nCommit the changes to my-new-image\n\n\ndocker commit $CID my-new-image\n\n\n\n\n\nStop and remove the original container:\n\n\ndocker stop $CID \n docker rm $CID\n\n\n\n\nStart the new container:\n\n\nCID=`docker run -d -e NGINX_GALAXY_LOCATION=\n/my-subdirectory\n -e GALAXY_CONFIG_ADMIN_USERS=admin@artbio.fr -p 8080:80 my-new-image`\n\n\n\n\nPersisting to disk\n\n\nAll changes made to the container are by default ephemeral; if you remove the container, the changes are gone.\nTo persist data (this includes the postgresql database, galaxy's config files and your user data), mount a Volume into\nthe containers /export folder.\nDue to the persistance mechanism (we use bind-mounts inside the container), you need to privilege the container.\nAssuming you would like to mount your local \n/data\n folder, run\n\n\nCID=`docker run -d --privileged -v /data:/export -p 8080:80 my-new-image`\n\n\n\n\nThis will run through the persistence tags of the galaxy.yml and export the required files to /export (now on your machine's /data).\nFrom the new location the files are being bind-mounted back into their original location.", 
            "title": "Docker"
        }, 
        {
            "location": "/examples/docker/#building-and-deploying-galaxy-kickstart-in-docker", 
            "text": "", 
            "title": "Building and deploying galaxy-kickstart in docker"
        }, 
        {
            "location": "/examples/docker/#requirements", 
            "text": "You need to have docker installed and configured for your user.  The repository comes with various Dockerfiles that can be used to configure a deployment using Docker,\nor you can start with a pre-built docker image.", 
            "title": "Requirements"
        }, 
        {
            "location": "/examples/docker/#running-images-from-the-dockerhub", 
            "text": "You can obtain a pre-built docker image from the dockerhub:  docker pull artbio/galaxy-kickstart-base  Start the image and serve it on port 8080 of your local machine in the standard docker way:  CID=`docker run -d -p 8080:80 artbio/galaxy-kickstart-base`  -p 8080:80  will forward requests to nginx inside the container running on port 80.", 
            "title": "Running images from the dockerhub"
        }, 
        {
            "location": "/examples/docker/#runtime-changes-to-pre-built-docker-images", 
            "text": "If you wish to reach the container on a subdirectory, add  -e NGINX_GALAXY_LOCATION=\"/my-subdirectory\"  to the docker call \nand galaxy will be served at  http://127.0.0.1:8080/my-subdirectory .  We recommend changing the default admin user as well, so the command becomes:  CID=`docker run -d -e NGINX_GALAXY_LOCATION= /my-subdirectory  -e GALAXY_CONFIG_ADMIN_USERS=admin@artbio.fr -p 8080:80 artbio/galaxy-kickstart-base`", 
            "title": "Runtime changes to pre-built docker images"
        }, 
        {
            "location": "/examples/docker/#commit-changed-containers-to-new-images", 
            "text": "As with standard docker containers, you can change, tag and commit running containers when you have configured them to your liking:\nCommit the changes to my-new-image  docker commit $CID my-new-image  Stop and remove the original container:  docker stop $CID   docker rm $CID  Start the new container:  CID=`docker run -d -e NGINX_GALAXY_LOCATION= /my-subdirectory  -e GALAXY_CONFIG_ADMIN_USERS=admin@artbio.fr -p 8080:80 my-new-image`", 
            "title": "Commit changed containers to new images"
        }, 
        {
            "location": "/examples/docker/#persisting-to-disk", 
            "text": "All changes made to the container are by default ephemeral; if you remove the container, the changes are gone.\nTo persist data (this includes the postgresql database, galaxy's config files and your user data), mount a Volume into\nthe containers /export folder.\nDue to the persistance mechanism (we use bind-mounts inside the container), you need to privilege the container.\nAssuming you would like to mount your local  /data  folder, run  CID=`docker run -d --privileged -v /data:/export -p 8080:80 my-new-image`  This will run through the persistence tags of the galaxy.yml and export the required files to /export (now on your machine's /data).\nFrom the new location the files are being bind-mounted back into their original location.", 
            "title": "Persisting to disk"
        }, 
        {
            "location": "/available_roles/", 
            "text": "ansible-postgresql-objects\n\n\ngalaxy-extras role\n\n\ngalaxy-tools role\n\n\ngalaxy-os role\n\n\ngalaxy role", 
            "title": "Available roles"
        }, 
        {
            "location": "/available_variables/", 
            "text": "", 
            "title": "Available variables"
        }, 
        {
            "location": "/editing_help/", 
            "text": "To view the help, type\n\n\nmkdocs serve\n\n\n\n\nThis will serve the documentation on http://127.0.0.1:8000.\n\n\nTo add new files, create a markdown document in docs/, and reference it in mkdocs.yml.\n\nIf you want to add a document called \nediting_help.md\n add the following line.\n\n\n - Editing the readme: editing_help.md\n\n\n\n\nso that \nmkdocs.yml\n looks like this.\n\n\nsite_name: GalaxyKickstarter\npages:\n - Home: index.md\n - What is GalaxyKickstarter: about.md\n - Getting started: getting_started.md\n - Customizations: customizations.md\n - Examples: examples.md\n - Available roles: available_roles.md\n - Available variables: available_variables.md\n - Editing the readme: editing_help.md\ntheme: readthedocs", 
            "title": "Editing the readme"
        }
    ]
}